import{_ as a,c as s,o as i,a2 as e}from"./chunks/framework.C94oF1kp.js";const m=JSON.parse('{"title":"基础篇","description":"","frontmatter":{},"headers":[],"relativePath":"编程基础/Git基础知识与常用命令指南.md","filePath":"编程基础/Git基础知识与常用命令指南.md"}'),l={name:"编程基础/Git基础知识与常用命令指南.md"},n=e(`<p>这是一个Git基础知识和常用命令的简要指南,涵盖了日常开发中最常用的操作。你可以将这个指南保存下来,作为日常工作的参考。 <img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052151819.png" alt="image.png"></p><p>学习Git的一些建议:</p><ol><li>先理解基本概念,如仓库、分支、提交等。</li><li>从基本的工作流程开始练习:修改文件、暂存、提交、推送。</li><li>尝试创建和管理分支,这是Git的强大特性之一。</li><li>学会查看和理解项目历史,使用<code>git log</code>和<code>git diff</code>。</li><li>熟悉如何处理冲突,这在团队协作中很重要。</li><li>多加练习,可以创建一个测试仓库来尝试各种命令。</li></ol><h1 id="基础篇" tabindex="-1">基础篇 <a class="header-anchor" href="#基础篇" aria-label="Permalink to &quot;基础篇&quot;">​</a></h1><h2 id="_1-git基本概念" tabindex="-1">1. Git基本概念 <a class="header-anchor" href="#_1-git基本概念" aria-label="Permalink to &quot;1. Git基本概念&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052152703.png" alt="image.png"></p><ul><li>仓库(Repository): 用来存放项目代码的地方</li><li>分支(Branch): 独立的开发线</li><li>提交(Commit): 保存当前工作进度</li><li>远程仓库(Remote): 托管在网络上的项目仓库</li></ul><h2 id="_2-配置git" tabindex="-1">2. 配置Git <a class="header-anchor" href="#_2-配置git" aria-label="Permalink to &quot;2. 配置Git&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052152374.png" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name &quot;Your Name&quot;</span></span>
<span class="line"><span>git config --global user.email &quot;your_email@example.com&quot;</span></span></code></pre></div><h2 id="_3-创建仓库" tabindex="-1">3. 创建仓库 <a class="header-anchor" href="#_3-创建仓库" aria-label="Permalink to &quot;3. 创建仓库&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git init  # 在当前目录初始化一个新的Git仓库</span></span>
<span class="line"><span>git clone &lt;url&gt;  # 克隆一个远程仓库到本地</span></span></code></pre></div><h2 id="_4-基本的工作流程" tabindex="-1">4. 基本的工作流程 <a class="header-anchor" href="#_4-基本的工作流程" aria-label="Permalink to &quot;4. 基本的工作流程&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052153015.png" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git status  # 查看仓库状态</span></span>
<span class="line"><span>git add &lt;file&gt;  # 将文件添加到暂存区</span></span>
<span class="line"><span>git commit -m &quot;commit message&quot;  # 提交更改</span></span>
<span class="line"><span>git push origin &lt;branch&gt;  # 将本地更改推送到远程仓库</span></span>
<span class="line"><span>git pull  # 从远程仓库拉取更新</span></span></code></pre></div><h2 id="_5-分支操作" tabindex="-1">5. 分支操作 <a class="header-anchor" href="#_5-分支操作" aria-label="Permalink to &quot;5. 分支操作&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052153607.png" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch  # 列出所有本地分支</span></span>
<span class="line"><span>git branch &lt;branch-name&gt;  # 创建新分支</span></span>
<span class="line"><span>git checkout &lt;branch-name&gt;  # 切换到指定分支</span></span>
<span class="line"><span>git merge &lt;branch-name&gt;  # 合并指定分支到当前分支</span></span></code></pre></div><h2 id="_6-查看历史" tabindex="-1">6. 查看历史 <a class="header-anchor" href="#_6-查看历史" aria-label="Permalink to &quot;6. 查看历史&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052153921.png" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git log  # 查看提交历史</span></span>
<span class="line"><span>git diff  # 查看未暂存的更改</span></span></code></pre></div><h2 id="_7-撤销更改" tabindex="-1">7. 撤销更改 <a class="header-anchor" href="#_7-撤销更改" aria-label="Permalink to &quot;7. 撤销更改&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -- &lt;file&gt;  # 撤销对文件的修改</span></span>
<span class="line"><span>git reset HEAD &lt;file&gt;  # 取消暂存文件</span></span>
<span class="line"><span>git revert &lt;commit&gt;  # 撤销某次提交</span></span></code></pre></div><h2 id="_8-远程仓库操作" tabindex="-1">8. 远程仓库操作 <a class="header-anchor" href="#_8-远程仓库操作" aria-label="Permalink to &quot;8. 远程仓库操作&quot;">​</a></h2><p><img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052154076.png" alt="image.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add origin &lt;url&gt;  # 添加远程仓库</span></span>
<span class="line"><span>git fetch  # 从远程仓库获取最新更改但不合并</span></span>
<span class="line"><span>git pull  # 拉取远程更改并合并到当前分支</span></span>
<span class="line"><span>git push origin &lt;branch&gt;  # 推送本地分支到远程仓库</span></span></code></pre></div><p>记住,实践是学习Git的最好方法。尝试在一个测试仓库中使用这些命令,会帮助你更好地理解Git的工作原理。 <img src="https://piggo5.oss-cn-shenzhen.aliyuncs.com/ob/202407052154562.png" alt="image.png"></p><h1 id="git进阶知识与技巧指南" tabindex="-1">Git进阶知识与技巧指南 <a class="header-anchor" href="#git进阶知识与技巧指南" aria-label="Permalink to &quot;Git进阶知识与技巧指南&quot;">​</a></h1><ul><li>分支管理策略：了解并在实际项目中尝试使用Git Flow或GitHub Flow。</li><li>练习高级分支操作：尝试使用rebase和cherry-pick，理解它们与merge的区别。</li><li>熟悉撤销操作：理解reset和revert的不同，谨慎使用，特别是在共享分支上。</li><li>利用stash功能：在需要快速切换任务时，stash非常有用。</li><li>了解子模块：如果你的项目依赖其他Git仓库，子模块会很有帮助。</li><li>使用标签：为重要的版本打标签，便于快速定位。</li><li>设置别名：为常用命令设置别名，提高效率。</li><li>探索Git Hooks：尝试使用pre-commit hook来自动运行代码检查。</li><li>考虑使用Git LFS：如果项目中有大文件，Git LFS可以帮助管理。</li><li>学会高效查看日志：使用不同的log选项来更好地理解项目历史。 这些高级特性需要在实际项目中反复练习才能熟练掌握。 你可以创建一个练习项目，逐个尝试这些功能。</li></ul><h2 id="_1-分支管理策略" tabindex="-1">1. 分支管理策略 <a class="header-anchor" href="#_1-分支管理策略" aria-label="Permalink to &quot;1. 分支管理策略&quot;">​</a></h2><h3 id="git-flow" tabindex="-1">Git Flow <a class="header-anchor" href="#git-flow" aria-label="Permalink to &quot;Git Flow&quot;">​</a></h3><p>一种常用的分支管理策略,包括以下分支:</p><ul><li>master: 主分支,存放稳定版本</li><li>develop: 开发分支</li><li>feature: 功能分支</li><li>release: 发布分支</li><li>hotfix: 热修复分支</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitGraph</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branch develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branch feature1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout feature1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    merge feature1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branch feature2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout feature2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    merge feature2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    checkout main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    merge develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commit tag:&quot;v1.0.0&quot;</span></span></code></pre></div><p>这个图表展示了一个基于 Git Flow 的简化工作流。主要特点包括：</p><ul><li>主分支（main）：只包含稳定的、可发布的代码。</li><li>开发分支（develop）：日常开发的集成分支。</li><li>特性分支（feature）：用于开发新功能。</li><li>发布分支（未显示）：用于准备新的生产版本。</li><li>热修复分支（未显示）：用于快速修复生产问题。</li></ul><h3 id="github-flow" tabindex="-1">GitHub Flow <a class="header-anchor" href="#github-flow" aria-label="Permalink to &quot;GitHub Flow&quot;">​</a></h3><p>一种更简单的工作流:</p><ul><li>只有一个长期分支master</li><li>其他都是短期的功能分支</li></ul><h2 id="_2-高级分支操作" tabindex="-1">2. 高级分支操作 <a class="header-anchor" href="#_2-高级分支操作" aria-label="Permalink to &quot;2. 高级分支操作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git rebase &lt;branch&gt;  # 变基操作,将当前分支移植到指定分支之上</span></span>
<span class="line"><span>git cherry-pick &lt;commit&gt;  # 将指定的提交应用到当前分支</span></span></code></pre></div><h2 id="_3-撤销操作" tabindex="-1">3. 撤销操作 <a class="header-anchor" href="#_3-撤销操作" aria-label="Permalink to &quot;3. 撤销操作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reset --hard &lt;commit&gt;  # 将HEAD重置到指定提交</span></span>
<span class="line"><span>git revert &lt;commit&gt;  # 创建一个新的提交来撤销指定提交的更改</span></span></code></pre></div><h2 id="_4-储藏-stash" tabindex="-1">4. 储藏(Stash) <a class="header-anchor" href="#_4-储藏-stash" aria-label="Permalink to &quot;4. 储藏(Stash)&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git stash  # 暂时储藏当前工作目录的更改</span></span>
<span class="line"><span>git stash list  # 查看所有储藏</span></span>
<span class="line"><span>git stash apply  # 应用最近的储藏</span></span>
<span class="line"><span>git stash drop  # 删除最近的储藏</span></span></code></pre></div><h2 id="_5-子模块-submodule" tabindex="-1">5. 子模块(Submodule) <a class="header-anchor" href="#_5-子模块-submodule" aria-label="Permalink to &quot;5. 子模块(Submodule)&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git submodule add &lt;url&gt;  # 添加子模块</span></span>
<span class="line"><span>git submodule init  # 初始化子模块</span></span>
<span class="line"><span>git submodule update  # 更新子模块</span></span></code></pre></div><h2 id="_6-打标签" tabindex="-1">6. 打标签 <a class="header-anchor" href="#_6-打标签" aria-label="Permalink to &quot;6. 打标签&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git tag &lt;tagname&gt;  # 创建轻量标签</span></span>
<span class="line"><span>git tag -a &lt;tagname&gt; -m &quot;message&quot;  # 创建附注标签</span></span>
<span class="line"><span>git push origin &lt;tagname&gt;  # 推送标签到远程</span></span></code></pre></div><h2 id="_7-使用别名" tabindex="-1">7. 使用别名 <a class="header-anchor" href="#_7-使用别名" aria-label="Permalink to &quot;7. 使用别名&quot;">​</a></h2><p>在 <code>.gitconfig</code> 文件中设置别名可以简化常用命令:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[alias]</span></span>
<span class="line"><span>    co = checkout</span></span>
<span class="line"><span>    br = branch</span></span>
<span class="line"><span>    ci = commit</span></span>
<span class="line"><span>    st = status</span></span></code></pre></div><h2 id="_8-使用-git-hooks" tabindex="-1">8. 使用 Git Hooks <a class="header-anchor" href="#_8-使用-git-hooks" aria-label="Permalink to &quot;8. 使用 Git Hooks&quot;">​</a></h2><p>Git hooks 是在 Git 执行特定事件时自动运行的脚本,位于 <code>.git/hooks</code> 目录下。常用的 hooks 包括:</p><ul><li>pre-commit: 提交前运行</li><li>post-commit: 提交后运行</li><li>pre-push: 推送前运行</li></ul><h2 id="_9-使用-git-large-file-storage-lfs" tabindex="-1">9. 使用 Git Large File Storage (LFS) <a class="header-anchor" href="#_9-使用-git-large-file-storage-lfs" aria-label="Permalink to &quot;9. 使用 Git Large File Storage (LFS)&quot;">​</a></h2><p>对于大文件的版本控制,可以使用 Git LFS:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git lfs install  # 安装 Git LFS</span></span>
<span class="line"><span>git lfs track &quot;*.psd&quot;  # 追踪所有 PSD 文件</span></span></code></pre></div><h2 id="_10-高级日志查看" tabindex="-1">10. 高级日志查看 <a class="header-anchor" href="#_10-高级日志查看" aria-label="Permalink to &quot;10. 高级日志查看&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git log --graph --oneline --all  # 查看分支图</span></span>
<span class="line"><span>git reflog  # 查看所有操作历史</span></span></code></pre></div><p>这些进阶技巧可以帮助你更高效地使用Git,特别是在复杂的项目或团队协作中。随着实践,你会逐渐掌握这些技巧,并在日常工作中灵活运用。</p><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>Git 是一个非常强大的版本控制系统,虽然短时间无法全面掌握,但我们可以学习基础知识和常用命令。以下是一个简单的学习大纲:</p><ol><li><p>Git 基础概念 (1小时)</p><ul><li>什么是版本控制</li><li>Git 的历史和优势</li><li>仓库、提交、分支的概念</li></ul></li><li><p>安装和配置 Git (30分钟)</p><ul><li>在你的操作系统上安装 Git</li><li>配置用户名和邮箱</li></ul></li><li><p>创建和克隆仓库 (1小时)</p><ul><li>使用 <code>git init</code> 创建新仓库</li><li>使用 <code>git clone</code> 克隆现有仓库</li></ul></li><li><p>基本的 Git 工作流程 (2小时)</p><ul><li>使用 <code>git status</code> 查看仓库状态</li><li>使用 <code>git add</code> 暂存更改</li><li>使用 <code>git commit</code> 提交更改</li><li>使用 <code>git log</code> 查看提交历史</li></ul></li><li><p>分支操作 (2小时)</p><ul><li>创建分支 <code>git branch</code></li><li>切换分支 <code>git checkout</code></li><li>合并分支 <code>git merge</code></li></ul></li><li><p>远程仓库操作 (2小时)</p><ul><li>添加远程仓库 <code>git remote add</code></li><li>推送到远程 <code>git push</code></li><li>从远程拉取 <code>git pull</code></li></ul></li><li><p>实践项目 (剩余时间)</p><ul><li>创建一个小项目，运用学到的 Git 命令</li><li>模拟团队协作，创建分支、合并更改等</li></ul></li><li><p>额外资源和回顾 (30分钟)</p><ul><li>回顾学习内容</li><li>推荐进阶学习资源</li></ul></li></ol><p>这个计划涵盖了 Git 的基础知识。</p><p>如果你想要更详细的解释或者关于某个特定部分的更多信息，请随时告诉我。欢迎在评论区交流～</p>`,66),t=[n];function p(o,c,h,d,g,r){return i(),s("div",null,t)}const b=a(l,[["render",p]]);export{m as __pageData,b as default};
